name: Build VHDX
on: 
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure Resource Location'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - eastus2
        - westus
        - westeurope
      configuration:
        description: 'Image Configuration'
        required: true
        default: 'WinServer+MicrosoftWindowsServer+WindowsServer+2022-datacenter-g2+latest+x64+Standard_D8s_v5'
        type: choice
        options:
          - WinServer+MicrosoftWindowsServer+WindowsServer+2022-datacenter-g2+latest+x64+Standard_D8s_v5+Windows
          - WinIoT+MicrosoftWindowsDesktop+windows-11+win11-23h2-ent+latest+x64+Standard_D8s_v5+Windows
          - Linux+canonical+0001-com-ubuntu-server-jammy+22_04-lts-gen2+latest+x64+Standard_D8s_v5+Linux
      computeGalleryName:
        description: 'Azure Compute Gallery Name'
        type: string
        default: sigarcfootprint
        required: true
      resourceGroupName:
        description: 'Azure Resource Group'
        type: string
        default: rg-arc-footprint-images
        required: true
      createVm:
        description: 'Create VM from image'
        type: boolean
        default: false
        required: true
jobs:
  Build-VHDX:
    runs-on: ubuntu-latest
    outputs:
      configurationName: ${{ steps.createImage.outputs.configurationName }}
      vmSize: ${{ steps.createImage.outputs.vmSize }}
      imageVersion: ${{ steps.createImage.outputs.imageVersion }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ vars.AZURE_CREDENTIALS }}'
    - name: Run az deployment for image creation
      id: createImage
      run: |
        CONFIGURATIONNAME="$(echo ${{ inputs.configuration }} | cut -d'+' -f1)"
        PUBLISHER="$(echo ${{ inputs.configuration }} | cut -d'+' -f2)"
        OFFER="$(echo ${{ inputs.configuration }} | cut -d'+' -f3)"
        SKU="$(echo ${{ inputs.configuration }} | cut -d'+' -f4)"
        VERSION="$(echo ${{ inputs.configuration }} | cut -d'+' -f5)"
        ARCHITECTURE="$(echo ${{ inputs.configuration }} | cut -d'+' -f6)"
        VMSIZE="$(echo ${{ inputs.configuration }} | cut -d'+' -f7)"
        OSTYPE="$(echo ${{ inputs.configuration }} | cut -d'+' -f8)"

        echo "configurationName=$CONFIGURATIONNAME" >> $GITHUB_OUTPUT
        echo "vmSize=$VMSIZE" >> "$GITHUB_OUTPUT"

        GALLERY="${{ inputs.computeGalleryName }}"
        RG="${{ inputs.resourceGroupName }}"
        GALLERY_EXISTS=false
        IDENTITY_EXISTS=false
        IMGDEF_EXISTS=false

        echo "Checking if things exist..."

        if [ -n "$(az sig list --query "[?name=='$GALLERY']" -o tsv 2>/dev/null)" ]; then
          RG=$(az sig list --query "[?name=='$GALLERY'].resourceGroup" -o tsv)
          echo "Gallery $GALLERY found in $RG. Use existing..."
          GALLERY_EXISTS=true
          if [ -n "$(az sig image-definition list --gallery-name $GALLERY -g $RG --query "[?identifier.offer=='$OFFER'&&identifier.publisher=='$PUBLISHER'&&identifier.sku=='$SKU'].name" -o tsv 2>/dev/null)" ]; then
            echo "Image definition found. Use existing..."
            IMGDEF_EXISTS=true
          fi
        fi

        if [ -n "$(az identity show -n ${{ inputs.computeGalleryName }}-identity -g $RG --query id -o tsv 2>/dev/null)" ]; then
          echo "Identity ${{ inputs.computeGalleryName }}-identity found in $RG. Use existing..."
          IDENTITY_EXISTS=true
        fi     

        echo "Running az deployment sub create..."

        azureImageTemplateid=$(az deployment sub create \
          --name fpdeployment${{github.run_id}} \
          --location ${{ inputs.location }} \
          --template-file $GITHUB_WORKSPACE/scripts/main-image.bicep \
          --parameters resourceGroupName=${{ inputs.resourceGroupName }} \
                        galleryName=${{ inputs.computeGalleryName }} \
                        imageDefinitionName=$CONFIGURATIONNAME \
                        imageTemplateName="aksEEAIO-${{github.run_id}}" \
                        imageVersion="latest" \
                        publisher=$PUBLISHER \
                        offer=$OFFER \
                        sku=$SKU \
                        version=$VERSION\
                        architecture=$ARCHITECTURE \
                        vmSize=$VMSIZE \
                        osType=$OSTYPE \
                        imgdefExists=$IMGDEF_EXISTS \
                        exists=$GALLERY_EXISTS \
                        identityExists=$IDENTITY_EXISTS --query properties.outputs.azureImageTemplateid.value -o tsv)

        az resource wait --ids $azureImageTemplateid --api-version=2022-02-14 --custom "properties.lastRunStatus.runState=='Running'"
        templateStatus=$(az resource show --ids $azureImageTemplateid --api-version=2022-02-14 --query "properties.lastRunStatus.runState" -o tsv)

        while [ "$templateStatus" == "Running" ]; do
          echo "Image build state still running, continue to wait..."
          az resource wait --ids $azureImageTemplateid --api-version=2022-02-14 --custom "properties.lastRunStatus.runState!='Running'"
          templateStatus=$(az resource show --ids $azureImageTemplateid --api-version=2022-02-14 --query "properties.lastRunStatus.runState" -o tsv)
        done

        if [ "$templateStatus" != "Succeeded" ]; then
          echo "Image creation has not succeeded. Last run state: $templateStatus"
          exit 1
        else
          echo "Image creation has succeeded."
        fi
        
        newImageVersion=$(az resource show --ids $azureImageTemplateid/runOutputs/arc_footprint_image --api-version=2021-10-01 --query properties.artifactId -o tsv | rev | cut -d '/' -f 1 | rev)
        echo "imageVersion=$newImageVersion" >> "$GITHUB_OUTPUT"
  Build-VM:
    if: ${{ inputs.createVm }}
    uses: ./.github/workflows/build-vm.yaml
    needs: Build-VHDX
    with:
      location: ${{ inputs.location }}
      galleryResourceGroupName: ${{ inputs.resourceGroupName }}
      computeGalleryName: ${{ inputs.computeGalleryName }}
      imageDefinitionName: ${{ needs.Build-VHDX.outputs.configurationName }}
      imageVersion: ${{ needs.Build-VHDX.outputs.imageVersion }}
      vmName: ${{ needs.Build-VHDX.outputs.configurationName }}
      vmSize: ${{ needs.Build-VHDX.outputs.vmSize }}
    secrets: inherit