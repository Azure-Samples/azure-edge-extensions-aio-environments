name: Build VHDX
on: 
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure Resource Location'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - eastus2
        - westus
        - westeurope
      configuration:
        description: 'Image Configuration'
        required: true
        default: 'WinServer+MicrosoftWindowsServer+WindowsServer+2022-datacenter-g2+latest+x64+Standard_D8s_v5'
        type: choice
        options:
          - WinServer+MicrosoftWindowsServer+WindowsServer+2022-datacenter-g2+latest+x64+Standard_D8s_v5+Windows
          - WinIoT+MicrosoftWindowsDesktop+Windows-10+win10-22h2-entn-g2+latest+x64+Standard_D8s_v5+Windows
          - Linux+canonical+0001-com-ubuntu-server-jammy+22_04-lts-gen2+latest+x64+Standard_D8s_v5+Linux
      computeGalleryName:
        description: 'Azure Compute Gallery Name'
        type: string
        default: sigarcfootprint
        required: true
      resourceGroupName:
        description: 'Azure Resource Group'
        type: string
        default: rg-arc-footprint
        required: true
      createVm:
        description: 'Create VM from image'
        type: boolean
        default: false
        required: true
jobs:
  Build-VHDX:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Run az deploy
      run: |
        #! /bin/bash
        CONFIGURATIONNAME="$(echo ${{ inputs.configuration }} | cut -d'+' -f1)"
        PUBLISHER="$(echo ${{ inputs.configuration }} | cut -d'+' -f2)"
        OFFER="$(echo ${{ inputs.configuration }} | cut -d'+' -f3)"
        SKU="$(echo ${{ inputs.configuration }} | cut -d'+' -f4)"
        VERSION="$(echo ${{ inputs.configuration }} | cut -d'+' -f5)"
        ARCHITECTURE="$(echo ${{ inputs.configuration }} | cut -d'+' -f6)"
        VMSIZE="$(echo ${{ inputs.configuration }} | cut -d'+' -f7)"
        OSTYPE="$(echo ${{ inputs.configuration }} | cut -d'+' -f8)"
        echo "CONFIGURATIONNAME=$CONFIGURATIONNAME" >> "$GITHUB_ENV"
        echo "VMSIZE=$VMSIZE" >> "$GITHUB_ENV"
      
        echo "ConfigurationName: $CONFIGURATIONNAME"
        echo "Publisher: $PUBLISHER"
        echo "Offer: $OFFER"
        echo "Sku: $SKU"
        echo "Version: $VERSION"
        echo "Architecture: $ARCHITECTURE"
        echo "VmSize: $VMSIZE"
        echo "OsType: $OSTYPE"

        GALLERY="${{ inputs.computeGalleryName }}"
        RG="${{ inputs.resourceGroupName }}"
        GALLERY_EXISTS=false
        IDENTITY_EXISTS=false

        echo "Checking if things exists..."

        if [ -n "$(az sig show --gallery-name $GALLERY -g $RG --query id -o tsv 2>/dev/null)" ]; then
          echo "Gallery $GALLERY found in $RG. Use existing..."
          GALLERY_EXISTS=true
        fi

        if [ -n "$(az identity show -n ${{ inputs.computeGalleryName }}-identity -g $RG --query id -o tsv 2>/dev/null)" ]; then
          echo "Identity ${{ inputs.computeGalleryName }}-identity found in $RG. Use existing..."
          IDENTITY_EXISTS=true
        fi     

        echo "Running az deployment sub create..."

        # az deployment sub create \
        # --name fpdeployment${{github.run_id}} \
        # --location ${{ inputs.location }} \
        # --template-file $GITHUB_WORKSPACE/scripts/main-image.bicep \
        # --parameters spClientId=${{ secrets.AZURE_CLIENT_ID }} \
        #               spClientSecret=${{ secrets.AZURE_CLIENT_SECRET }} \
        #               resourceGroupName=${{ inputs.resourceGroupName }} \
        #               galleryName=${{ inputs.computeGalleryName }} \
        #               imageDefinitionName=$CONFIGURATIONNAME \
        #               imageTemplateName="aksEEAIO-${{github.run_id}}" \
        #               imageVersion="latest" \
        #               publisher=$PUBLISHER \
        #               offer=$OFFER \
        #               sku=$SKU \
        #               version=$VERSION\
        #               architecture=$ARCHITECTURE \
        #               vmSize=$VMSIZE \
        #               osType=$OSTYPE \
        #               exists=$GALLERY_EXISTS \
        #               identityExists=$IDENTITY_EXISTS --debug
  # Build-VM:
  #   runs-on: ubuntu-latest
  #   if: ${{ inputs.createVm }}
  #   steps:                 
    - name: Wait for Image to be created
      if: ${{ inputs.createVm }}
      run: |
        echo "Wait for image to be created..."
        az sig image-version wait --created --resource-group ${{ inputs.resourceGroupName }} \
        --gallery-name ${{ inputs.computeGalleryName }} --gallery-image-definition id-arc-footprint \
        --gallery-image-version 1.0.0
    - name: Create VM
      if: ${{ inputs.createVm }}
      uses: ./.github/workflows/build-vm.yaml
      with:
        location: ${{ inputs.location }}
        resourceGroupName: ${{ inputs.resourceGroupName }}
        computeGalleryName: ${{ inputs.computeGalleryName }}
        imageDefinitionName: ${{ env.CONFIGURATIONNAME }}
        vmName: ${{ env.CONFIGURATIONNAME }}
        vmSize: ${{ env.VMSIZE }}