name: Build VM
on:
  workflow_call:
    inputs:
      location:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
      computeGalleryName:
        required: true
        type: string
      imageDefinitionName:
          required: true
          type: string
      vmName:
        required: true
        type: string
      vmSize:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure Resource Location'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - eastus2
        - westus
        - westeurope
      resourceGroupName:
        description: 'Azure Resource Group Name'
        default: 'rg-arc-footprint'
        required: true
        type: string
      computeGalleryName:
        description: 'Azure Shared Image Gallery Name'
        default: 'sigarcfootprint'
        required: true
        type: string
      imageDefinitionName:
        description: 'Image Definition Name'
        default: 'id-arc-footprint'
        required: true
        type: string
      vmName:
        description: 'VM Name'
        default: 'arc-footprint'
        required: true
        type: string
      vmSize:
        description: 'VM Size'
        default: 'Standard_D8s_v5'
        required: true
        type: string
jobs:
  Build-VM:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Wait for Image to be created
      run: |
        echo "Wait for image to be created..."
        az sig image-version wait --created --resource-group ${{ inputs.resourceGroupName }} \
        --gallery-name ${{ inputs.computeGalleryName }} --gallery-image-definition ${{ inputs.imageDefinitionName }} \
        --gallery-image-version 1.0.0
    - name: Create VM
      run: |
        subscriptionId=$(az account show --query id -o tsv)
        tenantId=$(az account show --query tenantId -o tsv)
        clusterName=aksEEAIO-${{github.run_id}}

        vmResourceGroup=${{ inputs.resourceGroupName }}
        galleryName=${{ inputs.computeGalleryName }}
        imageDefinitionName=${{ inputs.imageDefinitionName }}
        location=${{ inputs.location }}
        vmName=${{ inputs.vmName }}
        vmSize=${{ inputs.vmSize }}
        adminUsername=${{ secrets.VMADMINUSERNAME }}
        adminPassword=${{ secrets.VMADMINPASSWORD }}

        imgDef="/subscriptions/$subscriptionId/resourceGroups/$vmResourceGroup/providers/Microsoft.Compute/galleries/$galleryName/images/imageDefinitionName"

        az vm create \
          --resource-group $vmResourceGroup \
          --name $vmName \
          --image $imgDef \
          --size $vmSize \
          --security-type TrustedLaunch \
          --enable-secure-boot true \
          --enable-vtpm true \
          --admin-username $adminUsername \
          --admin-password $adminPassword \
          --generate-ssh-keys
        
        az vm extension set \
          --resource-group rg-vm-vhdx-arc-footprint \
          --vm-name footprint \
          --name CustomScriptExtension \
          --publisher Microsoft.Compute \
          --force-update \
          --settings '{"commandToExecute": "powershell -Command {
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant $tenantId;
            Get-AksEdgeKubeConfig;
            az connectedk8s connect -n $clusterName -l ${{ inputs.location }} -g ${{ inputs.resourceGroupName }} --subscription $subscriptionId;
            az connectedk8s enable-features -n $clusterName -g ${{ inputs.resourceGroupName }} --custom-locations-oid ${{ secrets.CUSTOM_LOCATIONS_OBJECT_ID }} --features cluster-connect custom-locations
            }"}'