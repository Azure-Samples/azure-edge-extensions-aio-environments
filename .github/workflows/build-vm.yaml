name: Build VM
on:
  workflow_call:
    inputs:
      location:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
      computeGalleryName:
        required: true
        type: string
      imageDefinitionName:
          required: true
          type: string
      vmName:
        required: true
        type: string
      vmSize:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure Resource Location'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - eastus2
        - westus
        - westeurope
      resourceGroupName:
        description: 'Azure Resource Group Name'
        default: 'rg-arc-footprint'
        required: true
        type: string
      computeGalleryName:
        description: 'Azure Shared Image Gallery Name'
        default: 'sigarcfootprint'
        required: true
        type: string
      imageDefinitionName:
        description: 'Image Definition Name'
        default: 'id-arc-footprint'
        required: true
        type: string
      vmName:
        description: 'VM Name'
        default: 'arc-footprint'
        required: true
        type: string
      vmSize:
        description: 'VM Size'
        default: 'Standard_D8s_v5'
        required: true
        type: string
jobs:
  Build-VM:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Wait for Image to be created
      run: |
        echo "Wait for image to be created..."
        az sig image-version wait --created --resource-group ${{ inputs.resourceGroupName }} \
        --gallery-name ${{ inputs.computeGalleryName }} --gallery-image-definition ${{ inputs.imageDefinitionName }} \
        --gallery-image-version 1.0.0
    - name: Create VM
      run: |
        subscriptionId=$(az account show --query id -o tsv)

        vmResourceGroup=${{ inputs.resourceGroupName }}
        galleryName=${{ inputs.computeGalleryName }}
        imageDefinitionName=${{ inputs.imageDefinitionName }}
        location=${{ inputs.location }}
        vmName=${{ inputs.vmName }}
        vmSize=${{ inputs.vmSize }}
        adminUsername=${{ secrets.VMADMINUSERNAME }}
        adminPassword=${{ secrets.VMADMINPASSWORD }}

        imgDef="/subscriptions/$subscriptionId/resourceGroups/$vmResourceGroup/providers/Microsoft.Compute/galleries/$galleryName/images/$imageDefinitionName"
      
        az vm create \
          --resource-group $vmResourceGroup \
          --name $vmName \
          --image $imgDef \
          --size $vmSize \
          --security-type TrustedLaunch \
          --enable-secure-boot true \
          --enable-vtpm true \
          --admin-username $adminUsername \
          --admin-password $adminPassword \
          --generate-ssh-keys
    
    - name: Install provider extensions
      run: |
        az provider register -n "Microsoft.ExtendedLocation"
        az provider register -n "Microsoft.Kubernetes";
        az provider register -n "Microsoft.KubernetesConfiguration";
        az provider register -n "Microsoft.IoTOperationsOrchestrator";
        az provider register -n "Microsoft.IoTOperationsMQ";
        az provider register -n "Microsoft.IoTOperationsDataProcessor";
        az provider register -n "Microsoft.DeviceRegistry";

    - name: Install AIO
      run: |
        subscriptionId=$(az account show --query id -o tsv)
        tenantId=$(az account show --query tenantId -o tsv)
        osType=$(az vm show -g ${{ inputs.resourceGroupName }} -n ${{ inputs.vmName }} --query storageProfile.osDisk.osType -o tsv)
        if [ $osType == "Windows" ]; then
          az vm extension set \
            --resource-group ${{ inputs.resourceGroupName }} \
            --vm-name ${{ inputs.vmName }} \
            --name CustomScriptExtension \
            --publisher Microsoft.Compute \
            --force-update \
            --settings "{\"commandToExecute\":\"powershell Get-AksEdgeKubeConfig -Confirm:\$false; \\
                kubectl get pods -A -v6; \\
                New-Item -Path c:\\ -Name Scripts -ItemType directory -Force; \\
                Copy-Item C:\\Windows\\System32\\config\\systemprofile\\.kube\\config -Destination C:\\Scripts; \\
                az login --service-principal -u \"\"${{ secrets.AZURE_CLIENT_ID }}\"\" -p \"\"${{ secrets.AZURE_CLIENT_SECRET }}\"\" --tenant \"\"$tenantId\"\"; \\
                az extension add --name connectedk8s; \\
                az extension add --name azure-iot-ops; \\
                az connectedk8s connect -n arc-aksEEAIO-${{github.run_id}} -l ${{ inputs.location }} -g ${{ inputs.resourceGroupName }} --kube-config C:\\Scripts\\config --subscription $subscriptionId; \\
                az connectedk8s enable-features -n arc-aksEEAIO-${{github.run_id}} -g ${{ inputs.resourceGroupName }} --kube-config C:\\Scripts\\config --custom-locations-oid \"\"${{ secrets.CUSTOM_LOCATIONS_OBJECT_ID }}\"\" --features cluster-connect custom-locations; \\
                az iot ops init --context default --cluster arc-aksEEAIO-${{github.run_id}} -g ${{ inputs.resourceGroupName }} --kv-id \"\"$(az keyvault create -n kv-aksEEAIO-${{github.run_id}} -g ${{ inputs.resourceGroupName }} -o tsv --query id)\"\" --sp-app-id \"\"${{ secrets.AZURE_CLIENT_ID }}\"\" --sp-object-id \"\"${{ secrets.AZURE_OBJECT_ID }}\"\" --sp-secret \"\"${{ secrets.AZURE_CLIENT_SECRET }}\"\"; \\
            \"}"
              
        else
          az vm extension set \
          --resource-group ${{ inputs.resourceGroupName }} \
          --vm-name ${{ inputs.vmName }} \
          --name customScript \
          --publisher Microsoft.Azure.Extensions \
          --force-update \
          --settings "{\"commandToExecute\":\"powershell Get-AksEdgeKubeConfig -Confirm:\$false; \\
              kubectl get pods -A -v6; \\
              New-Item -Path c:\\ -Name Scripts -ItemType directory -Force; \\
              Copy-Item C:\\Windows\\System32\\config\\systemprofile\\.kube\\config -Destination C:\\Scripts; \\
              az login --service-principal -u \"\"${{ secrets.AZURE_CLIENT_ID }}\"\" -p \"\"${{ secrets.AZURE_CLIENT_SECRET }}\"\" --tenant \"\"$tenantId\"\"; \\
              az extension add --name connectedk8s; \\
              az extension add --name azure-iot-ops; \\
              az connectedk8s connect -n arc-aksEEAIO-${{github.run_id}} -l ${{ inputs.location }} -g ${{ inputs.resourceGroupName }} --kube-config C:\\Scripts\\config --subscription $subscriptionId; \\
              az connectedk8s enable-features -n arc-aksEEAIO-${{github.run_id}} -g ${{ inputs.resourceGroupName }} --kube-config C:\\Scripts\\config --custom-locations-oid \"\"${{ secrets.CUSTOM_LOCATIONS_OBJECT_ID }}\"\" --features cluster-connect custom-locations; \\
              az iot ops init --context default --cluster arc-aksEEAIO-${{github.run_id}} -g ${{ inputs.resourceGroupName }} --kv-id \"\"$(az keyvault create -n kv-aksEEAIO-${{github.run_id}} -g ${{ inputs.resourceGroupName }} -o tsv --query id)\"\" --sp-app-id \"\"${{ secrets.AZURE_CLIENT_ID }}\"\" --sp-object-id \"\"${{ secrets.AZURE_OBJECT_ID }}\"\" --sp-secret \"\"${{ secrets.AZURE_CLIENT_SECRET }}\"\"; \\
          \"}"
        fi
