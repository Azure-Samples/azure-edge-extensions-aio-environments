name: Build VM
on:
  workflow_call:
    inputs:
      location:
        required: true
        type: string
      galleryResourceGroupName:
        required: true
        type: string
      computeGalleryName:
        required: true
        type: string
      imageDefinitionName:
          required: true
          type: string
      imageVersion:
          required: true
          type: string
      vmName:
        required: true
        type: string
      vmSize:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure Resource Location'
        required: true
        default: 'eastus'
        type: choice
        options:
        - eastus
        - eastus2
        - westus
        - westeurope
      galleryResourceGroupName:
        description: 'Azure Gallery Resource Group Name'
        default: 'rg-arc-footprint-images'
        required: true
        type: string
      computeGalleryName:
        description: 'Azure Shared Image Gallery Name'
        default: 'sigarcfootprint'
        required: true
        type: string
      imageDefinitionName:
        description: 'Image Definition Name'
        default: 'WinServer'
        required: true
        type: choice
        options:
        - WinServer
        - WinIoT
        - Linux
      imageVersion:
        description: 'Image Version'
        default: '1.0.0'
        required: true
        type: string
      vmName:
        description: 'VM Name'
        default: 'arc-footprint'
        required: true
        type: string
      vmSize:
        description: 'VM Size'
        default: 'Standard_D8s_v5'
        required: true
        type: string
jobs:
  Build-VM:
    runs-on: ubuntu-latest
    env:
      galleryResourceGroup: ${{ inputs.galleryResourceGroupName }}
      galleryName: ${{ inputs.computeGalleryName }}
      imageDefinitionName: ${{ inputs.imageDefinitionName }}
      imageVersion: ${{ inputs.imageVersion }}
      location: ${{ inputs.location }}
      resourceGroup: rg-${{ inputs.vmName }}
      vmName: ${{ inputs.vmName }}
      vmSize: ${{ inputs.vmSize }}
      adminUsername: ${{ secrets.VMADMINUSERNAME }}
      adminPassword: ${{ secrets.VMADMINPASSWORD }}
      clusterName: "aksEEAIO-${{github.run_id}}"
      kvName: "kv-${{github.run_id}}"
      vmIdentityName: ${{ inputs.vmName }}-id
      grafanaDashboardName: footprint-${{github.run_id}}
      monitorName: footprint
    outputs:
      clusterName: ${{ env.clusterName }}
      resourceGroup: ${{ env.resourceGroup }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Validate parameters
      run: |
        echo "Checking if VM already exists..."
        if [ -n "$(az vm show -n $vmName -g $resourceGroup --query id -o tsv 2>/dev/null)" ]; then
          echo "Error: VM $vmName in RG $resourceGroup already exists. Please delete existing VM or re-run with different name."
          exit 1
        fi
        echo "VM parameters are valid..."
    - name: Wait for Image to be created
      run: |
        echo "Wait for image to be created..."
        az sig image-version wait --created --resource-group $galleryResourceGroup \
        --gallery-name $galleryName --gallery-image-definition $imageDefinitionName \
        --gallery-image-version $imageVersion
    - name: Create VM
      run: |
        subscriptionId=$(az account show --query id -o tsv)

        if [ !$(az group exists -n $resourceGroup) ]; then
          echo "Creating RG $resourceGroup..."
          az group create -n $resourceGroup -l $location
        fi

        imgDef="/subscriptions/$subscriptionId/resourceGroups/$galleryResourceGroup/providers/Microsoft.Compute/galleries/$galleryName/images/$imageDefinitionName/versions/$imageVersion"

        echo "Checking identity exists?..."
        identity=$(az identity list --query "[?name=='$vmIdentityName'&&resourceGroup=='$resourceGroup'].id" -o tsv)

        if [ -z $identity ]; then
          echo "Creating identity $vmIdentityName..."
          identity="$(az identity create --name $vmIdentityName -g $resourceGroup --query id -o tsv)"
        else
          echo "Identity ($vmIdentityName) already exists"
        fi

        echo "Fetching principalId..."
        principalId="$(az identity show --name $vmIdentityName -g $resourceGroup --query principalId -o tsv)"

        echo "Creating role assignment for $vmIdentityName (principalId: $principalId)..."
        az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --role "Owner" --scope /subscriptions/$subscriptionId
        az role assignment create --assignee-object-id $principalId --assignee-principal-type ServicePrincipal --role "Owner" --scope /subscriptions/$subscriptionId/resourceGroups/$resourceGroup

        echo "Creating VM..."
        az vm create \
          --resource-group $resourceGroup \
          --name $vmName \
          --image $imgDef \
          --size $vmSize \
          --security-type TrustedLaunch \
          --enable-secure-boot true \
          --enable-vtpm true \
          --admin-username $adminUsername \
          --admin-password $adminPassword \
          --assign-identity $identity
    
    - name: Install provider extensions
      run: |
        az provider register -n "Microsoft.ExtendedLocation"
        az provider register -n "Microsoft.Kubernetes";
        az provider register -n "Microsoft.KubernetesConfiguration";
        az provider register -n "Microsoft.IoTOperationsOrchestrator";
        az provider register -n "Microsoft.IoTOperationsMQ";
        az provider register -n "Microsoft.IoTOperationsDataProcessor";
        az provider register -n "Microsoft.DeviceRegistry";
        az provider register -n "Microsoft.Insights";
        az provider register -n "Microsoft.AlertsManagement";

    - name: Install AIO
      run: |
        subscriptionId=$(az account show --query id -o tsv)
        tenantId=$(az account show --query tenantId -o tsv)
        osType=$(az vm show -g $resourceGroup -n $vmName --query storageProfile.osDisk.osType -o tsv)
        principalId=$(az identity show --name $vmIdentityName -g $resourceGroup --query principalId -o tsv)

        echo "Creating keyvault..."
        kvId=$(az keyvault create -n $kvName -g $resourceGroup -o tsv --no-self-perms --query id -o tsv)
        az keyvault set-policy -n $kvName -g $resourceGroup --object-id ${{ secrets.AZURE_SP_OBJECT_ID }} --secret-permissions all --key-permissions all --storage-permissions all --certificate-permissions all
        az keyvault set-policy -n $kvName -g $resourceGroup --object-id $principalId --secret-permissions all --key-permissions all --storage-permissions all --certificate-permissions all

        echo "Creating VM extension for $osType with force update..."
        if [ $osType == "Windows" ]; then
          az vm extension set \
            --resource-group $resourceGroup \
            --vm-name $vmName \
            --name CustomScriptExtension \
            --publisher Microsoft.Compute \
            --force-update \
            --settings "{\"commandToExecute\":\"powershell Get-AksEdgeKubeConfig -KubeConfigPath C:\\Scripts -Confirm:\$false; \
                kubectl get pods -A -v6 --kubeconfig C:\\scripts\\config; \
                az login --identity; \
                az extension add --name connectedk8s --version 1.6.0; \
                az extension add --name azure-iot-ops; \
                az connectedk8s connect --debug -n $clusterName -l $location -g $resourceGroup --kube-config C:\\Scripts\\config --subscription $subscriptionId; \
                Remove-Item -LiteralPath C:\\Windows\\System32\\config\\systemprofile\\.azure\\AzureArcCharts -Recurse -Force; \
                az connectedk8s enable-features --debug -n $clusterName -g $resourceGroup --kube-config C:\\Scripts\\config --custom-locations-oid \"\"${{ secrets.CUSTOM_LOCATIONS_OBJECT_ID }}\"\" --features cluster-connect custom-locations; \
                \$env:KUBECONFIG='C:\\Scripts\\config'; \
                az iot ops init --debug --cluster $clusterName -g $resourceGroup --kv-id \"\"$kvId\"\" --sp-app-id \"\"${{ secrets.AZURE_SP_CLIENT_ID }}\"\" --sp-object-id \"\"${{ secrets.AZURE_SP_OBJECT_ID }}\"\" --sp-secret \"\"${{ secrets.AZURE_SP_CLIENT_SECRET }}\"\" --no-progress; \
            \"}"
        else
          az vm extension set \
            --resource-group $resourceGroup \
            --vm-name $vmName \
            --name customScript \
            --publisher Microsoft.Azure.Extensions \
            --force-update \
            --settings "{\"commandToExecute\": \" \
                curl -sfL https://get.k3s.io | sh - && \
                export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && \
                kubectl config use-context default && \
                kubectl get pods -A -v6 && \
                az login --service-principal -u ${{ secrets.AZURE_SP_CLIENT_ID }} -p \"\"${{ secrets.AZURE_SP_CLIENT_SECRET }}\"\" --tenant $tenantId && \
                az extension add --name connectedk8s --version 1.6.0 && \
                az extension add --name azure-iot-ops && \
                az connectedk8s connect --debug -n $clusterName -l $location -g $resourceGroup --subscription $subscriptionId && \
                az connectedk8s enable-features --debug -n $clusterName -g $resourceGroup --custom-locations-oid \"\"${{ secrets.CUSTOM_LOCATIONS_OBJECT_ID }}\"\" --features cluster-connect custom-locations && \
                az iot ops init --debug --cluster $clusterName -g $resourceGroup --kv-id \"\"$kvId\"\" --sp-app-id \"\"${{ secrets.AZURE_SP_CLIENT_ID }}\"\" --sp-object-id \"\"${{ secrets.AZURE_SP_OBJECT_ID }}\"\" --sp-secret \"\"${{ secrets.AZURE_SP_CLIENT_SECRET }}\"\" --no-progress \
            \"}"
        fi

  Build-Monitoring:
    uses: ./.github/workflows/build-monitoring.yaml
    needs: Build-VM
    with:
      clusterName: ${{ needs.Build-VM.outputs.clusterName }}
      resourceGroupName: ${{ needs.Build-VM.outputs.resourceGroup }}
    secrets: inherit